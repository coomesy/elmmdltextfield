var _user$project$Main$map = F3(
	function (k, f, a) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			a,
			A2(
				_elm_lang$core$Maybe$map,
				function (x) {
					return A3(
						_elm_lang$core$Array$set,
						k,
						f(x),
						a);
				},
				A2(_elm_lang$core$Array$get, k, a)));
	});
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Increase':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A3(
								_user$project$Main$map,
								_p0._0,
								F2(
									function (x, y) {
										return x + y;
									})(1),
								model.counters)
						}));
			case 'Reset':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A3(
								_user$project$Main$map,
								_p0._0,
								_elm_lang$core$Basics$always(0),
								model.counters)
						}));
			case 'Add':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A2(_elm_lang$core$Array$push, 0, model.counters)
						}));
			case 'Remove':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A3(
								_elm_lang$core$Array$slice,
								0,
								_elm_lang$core$Array$length(model.counters) - 1,
								model.counters)
						}));
			default:
				return A2(_debois$elm_mdl$Material$update, _p0._0, model);
		}
	});
var _user$project$Main$model = {counters: _elm_lang$core$Array$empty, mdl: _debois$elm_mdl$Material$model};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {counters: a, mdl: b};
	});
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$Remove = {ctor: 'Remove'};
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$Reset = function (a) {
	return {ctor: 'Reset', _0: a};
};
var _user$project$Main$Increase = function (a) {
	return {ctor: 'Increase', _0: a};
};
var _user$project$Main$view1 = F2(
	function (idx, val) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'padding', _1: '2rem'}
						]))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Current count: ',
						_elm_lang$core$Basics$toString(val))),
					A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Main$Mdl,
					_elm_lang$core$Native_List.fromArray(
						[0, idx]),
					_user$project$Main$model.mdl,
					_elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Button$onClick(
							_user$project$Main$Increase(idx)),
							A2(_debois$elm_mdl$Material_Options$css, 'margin', '0 24px')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Increase')
						])),
					A5(
					_debois$elm_mdl$Material_Button$render,
					_user$project$Main$Mdl,
					_elm_lang$core$Native_List.fromArray(
						[1, idx]),
					_user$project$Main$model.mdl,
					_elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Button$onClick(
							_user$project$Main$Reset(idx))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Reset')
						])),
					A4(
					_debois$elm_mdl$Material_Textfield$render,
					_user$project$Main$Mdl,
					_elm_lang$core$Native_List.fromArray(
						[2, idx]),
					_user$project$Main$model.mdl,
					_elm_lang$core$Native_List.fromArray(
						[
							_debois$elm_mdl$Material_Textfield$label('?????')
						]))
				]));
	});
var _user$project$Main$view = function (model) {
	var counters = A2(
		_elm_lang$core$List$indexedMap,
		_user$project$Main$view1,
		_elm_lang$core$Array$toList(model.counters));
	return _debois$elm_mdl$Material_Scheme$top(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(
				_elm_lang$core$List$concatMap,
				_elm_lang$core$Basics$identity,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$core$Native_List.fromArray(
						[
							A5(
							_debois$elm_mdl$Material_Button$render,
							_user$project$Main$Mdl,
							_elm_lang$core$Native_List.fromArray(
								[2]),
							model.mdl,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Button$onClick(_user$project$Main$Add)
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text('Add counter')
								]))
						]),
						_elm_lang$core$Native_List.fromArray(
						[
							A5(
							_debois$elm_mdl$Material_Button$render,
							_user$project$Main$Mdl,
							_elm_lang$core$Native_List.fromArray(
								[4]),
							model.mdl,
							_elm_lang$core$Native_List.fromArray(
								[
									_debois$elm_mdl$Material_Button$onClick(_user$project$Main$Remove)
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text('Remove counter')
								]))
						]),
						counters
					]))));
};
var _user$project$Main$main = {
	main: _elm_lang$html$Html_App$program(
		{
			init: {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none},
			view: _user$project$Main$view,
			subscriptions: _elm_lang$core$Basics$always(_elm_lang$core$Platform_Sub$none),
			update: _user$project$Main$update
		})
};
