var _user$project$Main$map = F3(
	function (k, f, a) {
		return A2(
			_elm_lang$core$Maybe$withDefault,
			a,
			A2(
				_elm_lang$core$Maybe$map,
				function (x) {
					return A3(
						_elm_lang$core$Array$set,
						k,
						f(x),
						a);
				},
				A2(_elm_lang$core$Array$get, k, a)));
	});
var _user$project$Main$model = {counters: _elm_lang$core$Array$empty, mdl: _debois$elm_mdl$Material$model};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {counters: a, mdl: b};
	});
var _user$project$Main$Mdl = function (a) {
	return {ctor: 'Mdl', _0: a};
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'Increase':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A3(
								_user$project$Main$map,
								_p0._0,
								F2(
									function (x, y) {
										return x + y;
									})(1),
								model.counters)
						}));
			case 'Reset':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A3(
								_user$project$Main$map,
								_p0._0,
								_elm_lang$core$Basics$always(0),
								model.counters)
						}));
			case 'Add':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A2(_elm_lang$core$Array$push, 0, model.counters)
						}));
			case 'Remove':
				return _debois$elm_mdl$Material_Helpers$pure(
					_elm_lang$core$Native_Utils.update(
						model,
						{
							counters: A3(
								_elm_lang$core$Array$slice,
								0,
								_elm_lang$core$Array$length(model.counters) - 1,
								model.counters)
						}));
			default:
				return A3(_debois$elm_mdl$Material$update, _user$project$Main$Mdl, _p0._0, model);
		}
	});
var _user$project$Main$Remove = {ctor: 'Remove'};
var _user$project$Main$Add = {ctor: 'Add'};
var _user$project$Main$Reset = function (a) {
	return {ctor: 'Reset', _0: a};
};
var _user$project$Main$Increase = function (a) {
	return {ctor: 'Increase', _0: a};
};
var _user$project$Main$view1 = F2(
	function (idx, val) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$style(
					{
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'padding', _1: '2rem'},
						_1: {ctor: '[]'}
					}),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						'Current count: ',
						_elm_lang$core$Basics$toString(val))),
				_1: {
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Button$render,
						_user$project$Main$Mdl,
						{
							ctor: '::',
							_0: 0,
							_1: {
								ctor: '::',
								_0: idx,
								_1: {ctor: '[]'}
							}
						},
						_user$project$Main$model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(
								_user$project$Main$Increase(idx)),
							_1: {
								ctor: '::',
								_0: A2(_debois$elm_mdl$Material_Options$css, 'margin', '0 24px'),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Increase'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Button$render,
							_user$project$Main$Mdl,
							{
								ctor: '::',
								_0: 1,
								_1: {
									ctor: '::',
									_0: idx,
									_1: {ctor: '[]'}
								}
							},
							_user$project$Main$model.mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(
									_user$project$Main$Reset(idx)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Reset'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A5(
								_debois$elm_mdl$Material_Textfield$render,
								_user$project$Main$Mdl,
								{
									ctor: '::',
									_0: 2,
									_1: {
										ctor: '::',
										_0: idx,
										_1: {ctor: '[]'}
									}
								},
								_user$project$Main$model.mdl,
								{
									ctor: '::',
									_0: _debois$elm_mdl$Material_Textfield$label('Floating label'),
									_1: {
										ctor: '::',
										_0: _debois$elm_mdl$Material_Textfield$floatingLabel,
										_1: {
											ctor: '::',
											_0: _debois$elm_mdl$Material_Textfield$text_,
											_1: {ctor: '[]'}
										}
									}
								},
								{ctor: '[]'}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$Main$view = function (model) {
	var counters = A2(
		_elm_lang$core$List$indexedMap,
		_user$project$Main$view1,
		_elm_lang$core$Array$toList(model.counters));
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		A2(
			_elm_lang$core$List$concatMap,
			_elm_lang$core$Basics$identity,
			{
				ctor: '::',
				_0: {
					ctor: '::',
					_0: A5(
						_debois$elm_mdl$Material_Button$render,
						_user$project$Main$Mdl,
						{
							ctor: '::',
							_0: 2,
							_1: {ctor: '[]'}
						},
						model.mdl,
						{
							ctor: '::',
							_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$Add),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Add counter'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '::',
						_0: A5(
							_debois$elm_mdl$Material_Button$render,
							_user$project$Main$Mdl,
							{
								ctor: '::',
								_0: 4,
								_1: {ctor: '[]'}
							},
							model.mdl,
							{
								ctor: '::',
								_0: _debois$elm_mdl$Material_Options$onClick(_user$project$Main$Remove),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Remove counter'),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					},
					_1: {
						ctor: '::',
						_0: counters,
						_1: {ctor: '[]'}
					}
				}
			}));
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{
		init: {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none},
		view: _user$project$Main$view,
		subscriptions: _elm_lang$core$Basics$always(_elm_lang$core$Platform_Sub$none),
		update: _user$project$Main$update
	})();
